/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package FiltroInterfaz;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Frame;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;

/**
 *
 * @author Fercr
 */
public class FiltroPanel extends javax.swing.JPanel {
    
    private Map<String, Elemento> elementosMap = new HashMap<>();
    private Color backgroundColor = Color.WHITE;  //color de fondo por defecto
    private String elemento; //Sirve para definir de que tipo de elementos hablamos, ejemplo en el proyecto hablamos de tipo de sangre
    private String razon; //Sirve para darle un sentido al atributo boolean de la clase Elemento, ejemplo en el proyecto hablamos de si es posible donar
    /**
     * Creates new form FiltroPanel
     */
    
    public FiltroPanel() {
        initComponents();
        loadElementos();
        this.elemento="Elemento"; //Aquí se asigna el tipo de elemento, ejemplo en el proyecto hablamos de tipo de sangre
        this.razon="¿Existe?";
        setModelItem();
    }
    public FiltroPanel(String element,String razonE) {
        initComponents();
        loadElementos();
        this.elemento=element; //Aquí se asigna el tipo de elemento, ejemplo en el proyecto hablamos de tipo de sangre
        this.razon=razonE;
        setModelItem();
    }
    private void setModelItem(){
        //Usamos este metodo para añadir manualmente los elementos en el ombobox
        //La razón es para que en el tipo de elemento se agregue el que se vaya a utilizar
        DefaultComboBoxModel<String> cbFiltr = new DefaultComboBoxModel();
        cbFiltr.addElement("ID");
        cbFiltr.addElement("Nombre");
        cbFiltr.addElement("Fecha");
        cbFiltr.addElement("Tipo de "+elemento);
        cbFiltr.addElement("Direccion");
        cbFiltr.addElement("Elegibilidad");
        comboFiltro.setModel(cbFiltr);
    }
    
    private void loadElementos() {
        //limpiar lo datos del mapa para recargar datos
        elementosMap.clear();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtBuscar = new javax.swing.JTextField();
        btnBuscar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultArea = new javax.swing.JTextArea();
        comboFiltro = new javax.swing.JComboBox<>();
        btnPersonalizar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnAgregarElemento = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnCargar = new javax.swing.JButton();

        setToolTipText("Filtro de Busqueda");

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        resultArea.setEditable(false);
        resultArea.setColumns(20);
        resultArea.setRows(5);
        jScrollPane1.setViewportView(resultArea);

        comboFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboFiltroActionPerformed(evt);
            }
        });

        btnPersonalizar.setText("Personalizar");
        btnPersonalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPersonalizarActionPerformed(evt);
            }
        });

        btnSalir.setText("Cerrar");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        jLabel1.setText("Filtrar por:");

        jLabel2.setText("Resultado de la búsqueda:");

        btnAgregarElemento.setText("Agregar elemento");
        btnAgregarElemento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarElementoActionPerformed(evt);
            }
        });

        jLabel3.setText("Ingrese la información:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel4.setText("Filtro de Búsqueda");

        btnCargar.setText("Cargar datos");
        btnCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnPersonalizar)
                        .addGap(29, 29, 29))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(comboFiltro, 0, 202, Short.MAX_VALUE)
                                .addGap(17, 17, 17)
                                .addComponent(btnBuscar)
                                .addGap(18, 18, 18))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 153, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnAgregarElemento)
                                        .addGap(27, 27, 27)
                                        .addComponent(btnCargar)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(112, 112, 112))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnSalir)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(166, 166, 166))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBuscar)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAgregarElemento)
                    .addComponent(btnCargar))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPersonalizar)
                    .addComponent(btnSalir))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // TODO add your handling code here:  
 
        String criterio = (String) comboFiltro.getSelectedItem();
        String valor = txtBuscar.getText();
        actualizarFiltrado(criterio, valor);
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void comboFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboFiltroActionPerformed

         //se obtiene el criterio del ComboBox
        String seleccionado = (String) comboFiltro.getSelectedItem();

        //mostrar un mensaje o hacer ajustes en la interfaz según la selección
        if(seleccionado.equals("ID")||seleccionado.equals("Nombre")||seleccionado.equals("Direccion")||seleccionado.equals("Elegibilidad")){
            JOptionPane.showMessageDialog(this, "Filtrado por "+seleccionado+" seleccionado.");
        }else if(seleccionado.equals("Fecha")){
            JOptionPane.showMessageDialog(this, "Filtrado por fecha seleccionado.");
            DialogoFecha dialogoFecha = new DialogoFecha((Frame) SwingUtilities.getWindowAncestor(this),true);
            dialogoFecha.setVisible(true);
            String fecha = dialogoFecha.getFecha();
            txtBuscar.setText(fecha);
        }else if(seleccionado.equals("Tipo de "+elemento)){
            JOptionPane.showMessageDialog(this, "Filtrado por tipo de "+elemento+" seleccionado.");
            ElementoDialog elementoDialog = new ElementoDialog((Frame) SwingUtilities.getWindowAncestor(this), true);
            elementoDialog.setVisible(true);

            //al cerrar el dialog, se obtiene el tipo de sangre
            String tipoElemento = elementoDialog.getElemento();
            if (tipoElemento != null) {
                txtBuscar.setText(tipoElemento);
            }
        }
    }//GEN-LAST:event_comboFiltroActionPerformed

    private void btnPersonalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPersonalizarActionPerformed
        // TODO add your handling code here:
        ConfigDialog configDialog = new ConfigDialog(JFrame.getFrames()[0], true, this);
        configDialog.setVisible(true);

    }//GEN-LAST:event_btnPersonalizarActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        // TODO add your handling code here:
        JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(this);
        if (frame != null) {
            frame.dispose();
        }
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnAgregarElementoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarElementoActionPerformed
  
        
        //obtener datos del usuario
        String id = JOptionPane.showInputDialog(this, "Ingrese ID del elemento:");
        if (id == null || id.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "El ID del elemento es obligatorio.");
            return;
        }

        String nombre = JOptionPane.showInputDialog(this, "Ingrese nombre del elemento:");
        if (nombre == null || nombre.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "El nombre del elemento es obligatorio.");
            return;
        }
        
        DialogoFecha dialogoFecha = new DialogoFecha((Frame) SwingUtilities.getWindowAncestor(this),true);
        dialogoFecha.setVisible(true);
        String fecha = dialogoFecha.getFecha();
        if (dialogoFecha.getBotonPulsado() == 1) {
            JOptionPane.showMessageDialog(this, "Se cancelo la entrada de fecha.");
            return;
        }
        
        ElementoDialog elementoDialog = new ElementoDialog((Frame) SwingUtilities.getWindowAncestor(this),true);
        elementoDialog.setVisible(true);
        String tipoElemento = elementoDialog.getElemento();
        if (tipoElemento == null || tipoElemento.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "El tipo de "+elemento+" es obligatorio.");
            return;
        }
        
        String direccion = JOptionPane.showInputDialog(this, "Ingrese la dirección:");
        if (direccion == null || direccion.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "La dirección es obligatoria.");
            return;
        } 
        
        //cuadro de dialogo con respuestas si/no, ejemplo: "¿Es elegible para donar?", esto lo contiene la variable global razon
        int respuesta = JOptionPane.showConfirmDialog(this, razon, "Elegible", JOptionPane.YES_NO_OPTION);
        
        // evaluar la respuesta
        boolean esElegible = (respuesta == JOptionPane.YES_OPTION);


        // Intentar agregar el elemento al sistema
        try {
            if (elementosMap.containsKey(id)) {
                JOptionPane.showMessageDialog(this, "Un elemento con este ID ya existe.");
            } else {
                Elemento nuevoElemento = new Elemento(id, nombre, fecha, tipoElemento, direccion, esElegible);
                elementosMap.put(id, nuevoElemento);
                JOptionPane.showMessageDialog(this, "Elemento agregado exitosamente!");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error de formato de fecha, no se agregó el elemento.");
        }
    }//GEN-LAST:event_btnAgregarElementoActionPerformed

    private void btnCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarActionPerformed
        // TODO add your handling code here:
        JFileChooser archE = new JFileChooser();
        archE.setDialogTitle("Seleccione un archivo SCV.");
        int res = archE.showOpenDialog(this);
        if (res == JFileChooser.APPROVE_OPTION){
            File archSelec = archE.getSelectedFile();
            leerDatos(archSelec.getAbsolutePath());
        }
    }//GEN-LAST:event_btnCargarActionPerformed

    private void actualizarFiltrado(String criterio, String valor){
        JOptionPane.showMessageDialog(this, "Filtrando por: " + criterio + " con valor: " + valor);
        
        StringBuilder resultado = new StringBuilder();
        boolean elementoEncontrado = false;
        
        if(valor == null || valor.trim().isEmpty()){
            JOptionPane.showMessageDialog(this, "Ingrese un valor para buscar.");
            return;
        }
        
        if("ID".equals(criterio)){
            Elemento elemento = elementosMap.get(valor);
            if (elemento != null) {
                resultado.append(elemento.formatElemento());
                elementoEncontrado = true;
            }
        }else{
            for(Elemento elemento : elementosMap.values()){
                switch (criterio) {
         
                    case "Nombre":
                        if(elemento.getNombre().equalsIgnoreCase(valor)) {
                            resultado.append(elemento.formatElemento());
                            elementoEncontrado = true;
                        }
                        break;
                    case "Fecha":
                        try{
                            if (elemento.getFecha().equals(valor)) {
                                resultado.append(elemento.formatElemento());
                                elementoEncontrado = true;
                            }
                        }catch(Exception e){
                            resultado.append("Fecha no valida.");
                        }
                        break;
                    /*case "Tipo de Sangre":
                        if(elemento.getTipoSangre().equalsIgnoreCase(valor)) {
                            resultado.append(elemento.formatElemento());
                            elementoEncontrado = true;
                        }
                        break;*/
                    case "Direccion":
                        if(elemento.getDireccion().toLowerCase().contains(valor.toLowerCase())) {
                            resultado.append(elemento.formatElemento());
                            elementoEncontrado = true;
                        }
                        break;
                    case "Elegibilidad":
                        boolean elegible = "Si".equals(valor);
                        if(elemento.isElegible() == elegible) {
                            resultado.append(elemento.formatElemento());
                            elementoEncontrado = true;
                        }
                        break; 
                }
                if(criterio.equals("Tipo de "+elemento)){
                        if(elemento.getTipoSangre().equalsIgnoreCase(valor)) {
                            resultado.append(elemento.formatElemento());
                            elementoEncontrado = true;
                        }
                }
            }
        }
        
        if(!elementoEncontrado){
            resultado.append("No se encontraron coincidencias.");
        }
        
        resultArea.setText(resultado.toString()); //muestra los resultados en el TextArea

        
        
    }
    
    /*
    private String formatElemento(Elemento elemento) {
        return String.format("ID: %s, Nombre: %s, Fecha Última Donación: %s, Tipo de Sangre: %s, Dirección: %s, Es elegible: %s\n",
                         elemento.getId(), elemento.getNombre(), elemento.getFechaUltimaDonacion(), elemento.getTipoSangre(), elemento.getDireccion(), elemento.isElegible() ? "Sí" : "No");
    }*/
    
    public void setPanelFont(String fontName, int fontSize) {
        
        Font newFont = new Font(fontName, Font.PLAIN, fontSize);
        this.setFont(newFont);
        for (Component comp : getComponents()) {
            comp.setFont(newFont);
        }
        revalidate();  //actualizar el layout con los nuevos tamaños de fuente
        repaint();     //redibuja el panel para mostrar los cambios
    }

    
    public void setPanelFontSize(int fontSize) {
        Font currentFont = this.getFont();
        Font newFont = currentFont.deriveFont((float) fontSize);
        setFont(newFont);  //cambia la fuente del panel
        for (Component comp : getComponents()) {
            comp.setFont(newFont);  //cambia la fuente de cada componente
        }
        revalidate();
        repaint();
    }
    
    
    public void setComponentsColor(Color color) {
        for (Component comp : getComponents()) {
            if (comp instanceof JTextField || comp instanceof JButton || comp instanceof JComboBox) {
                comp.setBackground(color);
            } else if (comp instanceof JScrollPane) {
                JScrollPane scrollPane = (JScrollPane) comp;
                Component view = scrollPane.getViewport().getView();

                if (view instanceof JTextArea) {
                    JTextArea textArea = (JTextArea) view;
                    textArea.setBackground(color);
                    textArea.setOpaque(true);
                }

                scrollPane.getViewport().setBackground(color);
                scrollPane.getViewport().setOpaque(true);
            }
        }
        repaint();  // Repintar el panel para asegurar los cambios
    }


    public Color getComponentsColor() {
        return backgroundColor;  //retorna el color almacenado
    }
    
    
    // Leer Archuivo 
    private void leerDatos(String rutaArchivo) {
        try (BufferedReader br = new BufferedReader(new FileReader(rutaArchivo))) {
            String linea;
            
            while ((linea = br.readLine()) != null) {
                String[] datos = linea.split(",");
               
                String id = datos[0].trim();
                String nombre = datos[1].trim();
                String fecha = datos[2].trim();
                String tipoElemento = datos[3].trim();
                String direccion = datos[4].trim();
                boolean elegible = Boolean.parseBoolean(datos[5].trim());
                //agregar elementos
                Elemento nuevoElemento = new Elemento(id, nombre, fecha, tipoElemento, direccion, elegible);
                elementosMap.put(id, nuevoElemento);
            }
            JOptionPane.showMessageDialog(this, "Datos cargados exitosamente.");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al leer el archivo.", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al procesar el archivo.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    

    

 





    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarElemento;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnCargar;
    private javax.swing.JButton btnPersonalizar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JComboBox<String> comboFiltro;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea resultArea;
    private javax.swing.JTextField txtBuscar;
    // End of variables declaration//GEN-END:variables
}
